<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>http状态码</title>
    <url>/http%E7%8A%B6%E6%80%81%E7%A0%81.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>http协议里，有<strong>五大类HTTP</strong>状态码</p>
<span id="more"></span>
<p>1xx状态码其实是<strong>提示信息</strong>，他表示<strong>目前是协议处理的中转状态，还需要后续的操作</strong><br>2xx状态码是<strong>成功</strong>，表示<strong>报文已收到且被正确处理</strong><br>3xx状态码是<strong>重定向</strong>，表示<strong>资源位置发生变动，需要客户端重新发送请求</strong><br>4xx状态码是<strong>客户端错误</strong>，表示<strong>请求报文有误，服务器无法处理</strong><br>5xx状态码是<strong>服务器错误</strong>，表示<strong>服务器在处理请求的时候内部发生了错误</strong><br>那么我来说说我们最常看到的几种状态码<br><code>400 Bad Request</code>表示<strong>客户端请求的报文有误</strong>，但比较笼统<br><code>404 Not Found</code>表示<strong>请求的资源在服务器上不存在或未找到，所以无法提交给客户端</strong><br><code>503 Service Unavailable</code>表示<strong>服务器当前很忙，暂时无法响应</strong></p>
]]></content>
      <tags>
        <tag>http/https</tag>
      </tags>
  </entry>
  <entry>
    <title>此博客第一篇文章-纪念</title>
    <url>/test-my-site.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>哈哈，其实这篇文章是测试的<br>代码之神保佑-d成功<br>求你了试了一个上午了<br>点开👇看我的<strong>艰辛故事</strong>🤣</p>
<span id="more"></span>
<p>对于这个hexo博客的搭建，其实不止是花费了一天<br>起因是什么？我在b站上看到了一个视频：《使用cloudstudio搭建mc服务器》，就是这个视频视频，引导我发现了cloud studio<br>看完视频后，我发现cloudstudio可以直接在云端创建一个虚拟服务器，里面的环境都可以直接搭建，非常友好<br>像我这样的学生党，电脑没有，对于老爹的电脑也碰不了碰不了，更别说在他的电脑上安装node.js或者hexo了<br>我有的，只有一个iPad<br>我用iPad注册了腾讯的cloud studio账号，创建了一个工作空间，然后开始像在自己的电脑上一样操作终端，一点一点的搭建起一个标准的hexo博客<br>其实现在你在百度上搜「cloud studio搭建hexo博客」大部分结果都是「此方法已过期」，究其原因，他们都是基于腾讯的page功能进行静态网页搭建的<br>啊？！难道除了腾讯就没有其他的page功能来承载我们的博客了嘛？？！<br>当然有！！我们最棒的GitHub一直以来都提供稳定的page服务，我敢说大部分人的博客都是部署在这个靠谱的page上的<br>就这样，我的hexo博客，上线了！！</p>
]]></content>
      <categories>
        <category>纪念</category>
      </categories>
      <tags>
        <tag>hexo博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>博客创建一个星期来加入的有趣功能汇总</title>
    <url>/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%98%9F%E6%9C%9F%E6%9D%A5%E5%8A%A0%E5%85%A5%E7%9A%84%E6%9C%89%E8%B6%A3%E5%8A%9F%E8%83%BD%E6%B1%87%E6%80%BB.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我现在的这个博客”十贰的小窝”是2022年4月5日搭建的，到今天4月14日已经一个星期多了，也许没有人会注意这个博客其实在一个星期内发生了翻天覆地的变化，这其中也有许多辛酸的故事😂。<br>接下来，我来大致按照时间线来讲一讲博客的改变，把他们汇总起来几乎可以变成一篇完整的博客美化教程喽🤩</p>
<span id="more"></span>
<h1 id="改名"><a href="#改名" class="headerlink" title="改名"></a>改名</h1><p>名字是一个博客的灵魂，并不是说原来的名字不好听，而是我无意中又取了一个我自认为很好听又符合我胃口的名字。<br>在这里我也说一下怎么给博客改名，首先我们找到站点配置文件注意是站点配置文件<strong>不是</strong>主题配置文件，是在你的博客的根目录下的那个_config.yml<br>里面找到：</p>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">    <span class="attribute">title</span><span class="punctuation">:</span> <span class="string">？？？</span></span><br><span class="line">    <span class="attribute">subtitle</span><span class="punctuation">:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attribute">description</span><span class="punctuation">:</span> <span class="string">&#x27;？？？&#x27;</span></span><br><span class="line">    <span class="attribute">keywords</span><span class="punctuation">:</span> <span class="string">？？？</span></span><br><span class="line">    <span class="attribute">author</span><span class="punctuation">:</span> <span class="string">？？？</span></span><br><span class="line">    <span class="attribute">language</span><span class="punctuation">:</span> <span class="string">zh-CN</span></span><br><span class="line">    <span class="attribute">timezone</span><span class="punctuation">:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意了啊</strong>这里打？？？的都是视情况而定的，就是说每个人的这部分都不同，你可以自定义。好，我们看一下：<br>title是<strong>站点的名字</strong>，比如说我的博客叫十贰的小窝，那我就填成这样：title: 十贰的小窝<br><em><strong>一定要记得冒号后面加一个空格！！！</strong></em><br>subtitle是<strong>副标题</strong>，据说next主题填这个没什么用，我也没试过其他的主题，大家就试着填吧。<br>description是<strong>描述</strong>比如说我的描述是<code>𝖘𝖊𝖎𝖓 𝖟𝖚𝖒 𝖙𝖔𝖉𝖊</code>（*ps:这是花体字，内容是原版德语的”向死而生”*），那我就把它填到description后面。<br>keywords是<strong>关键词</strong>，他有什么用呢？我也不知道….因为我看不到实际的效果，我猜想应该是用来搭配搜索引擎食用的，但是我的博客还没接到搜索引擎上，所以我看不到实际效果😂。<br>author是<strong>作者</strong>，这个挺好理解的，比如说我是<code>十贰</code>，我就把十贰填到author的后面<br>language建议填zh-CN，会将博客转为中文。<br>最后的timezone我不知道什么意思，跳过了…</p>
<h1 id="动态背景"><a href="#动态背景" class="headerlink" title="动态背景"></a>动态背景</h1><p>我已经<a href="https://hehysh.github.io/%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF.html">讲过了哦</a></p>
<h1 id="改字体"><a href="#改字体" class="headerlink" title="改字体"></a>改字体</h1><p><a href="https://hehysh.github.io/%E6%9B%B4%E6%94%B9%E5%8D%9A%E5%AE%A2%E5%AD%97%E4%BD%93.html">也讲过了</a><br>(*这篇文章我只是指出了我在改字体中的一个错误，请到文章中<strong>二次跳转</strong>到另外一个大佬的文章内进行学习)</p>
<h1 id="搜索栏"><a href="#搜索栏" class="headerlink" title="搜索栏"></a>搜索栏</h1><h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><p>我们首先来安装hexo博客搜索所需要的插件<br>在博客根目录执行命令<br><code>npm install hexo-generator-search --save</code><br>安装好了之后呢，我们就在博客的根目录下添加以下内容：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.<span class="keyword">xml</span></span><br><span class="line">  <span class="title">field</span>: post</span><br></pre></td></tr></table></figure>
<h2 id="常见错误的解决"><a href="#常见错误的解决" class="headerlink" title="常见错误的解决"></a>常见错误的解决</h2><h3 id="本地搜索功能突然不能用了"><a href="#本地搜索功能突然不能用了" class="headerlink" title="本地搜索功能突然不能用了"></a>本地搜索功能突然不能用了</h3><p>什么叫突然不能用了？就是刚开始搜索功能可以用，到了后来突然抽风用不了了。<br>我们先来看一位老哥的问题描述</p>
<blockquote>
<p>通过上面的安装一般是可以实现本地搜索功能的，但是，我的问题出现了，刚刚开始的时候，我是在windows电脑上面配置hexo的博客的，但是，后面我迁移到了mac上，然后本地搜索功能突然就不能用了。</p>
</blockquote>
<p>一般本地功能不能使用了，有以下几个原因<br>1.search.xml文件中有不符合规则的字符，导致不能解析。<br>2.search.xml中有错误，导致不能解析。<br>3.search.xml文件中有编码不一致的问题，导致xml解析失败。<br>（ps:<em>以上的search.xml就是我们配置了本地搜索后，自动生成的xml格式的包含站点所有博客的文件，通过这个文件就可以进行本地搜索功能。</em>)<br>解决办法：<br><strong>第一步</strong><br>找到站点配置文件：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.<span class="keyword">xml</span></span><br><span class="line">  <span class="title">field</span>: post</span><br></pre></td></tr></table></figure>
<p>我们将将search.xml改为search.json格式。<br><strong>第二步</strong><br>找到你的博客主题的search.ejs模板文件，修改下面代码:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;lets go！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&lt;%= config.root %&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">searchFunc</span>(<span class="string">&quot;&lt;%= config.root %&gt;&quot;</span> + <span class="string">&quot;search.xml&quot;</span>, <span class="string">&#x27;searchInput&#x27;</span>, <span class="string">&#x27;searchResult&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>也是改为json格式的文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;lets go！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&lt;%= config.root %&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">searchFunc</span>(<span class="string">&quot;&lt;%= config.root %&gt;&quot;</span> + <span class="string">&quot;search.json&quot;</span>, <span class="string">&#x27;searchInput&#x27;</span>, <span class="string">&#x27;searchResult&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>最后一步</strong><br>修改你的search的本地js文件，比如我的matery主题的就是在js文件夹下的search.js文件。<br>对这个文件进行json解析的修改，最终就可以成功解决问题</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> searchFunc = <span class="keyword">function</span> (<span class="params">path, search_id, content_id</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="comment">// &#x27;use strict&#x27;;</span></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attr">url</span>: path,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">datas</span>) &#123;</span><br><span class="line">            <span class="comment">// get the contents from search data</span></span><br><span class="line">            <span class="comment">// var datas = $(&quot;entry&quot;, xmlResponse).map(function () &#123;</span></span><br><span class="line">            <span class="comment">//     return &#123;</span></span><br><span class="line">            <span class="comment">//         title: $(&quot;title&quot;, this).text(),</span></span><br><span class="line">            <span class="comment">//         content: $(&quot;content&quot;, this).text(),</span></span><br><span class="line">            <span class="comment">//         url: $(&quot;url&quot;, this).text()</span></span><br><span class="line">            <span class="comment">//     &#125;;</span></span><br><span class="line">            <span class="comment">// &#125;).get();</span></span><br><span class="line">            <span class="comment">// console.log(xmlResponse);</span></span><br><span class="line">            <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;test!&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">console</span>.<span class="built_in">log</span>(datas);</span><br><span class="line">            <span class="keyword">var</span> <span class="symbol">$i</span>nput = document.getElementById(search_id);</span><br><span class="line">            <span class="keyword">var</span> <span class="symbol">$resultCo</span>ntent = document.getElementById(content_id);</span><br><span class="line">            <span class="symbol">$i</span>nput.addEventListener(<span class="string">&#x27;input&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> str = <span class="string">&#x27;&lt;ul class=\&quot;search-result-list\&quot;&gt;&#x27;</span>;</span><br><span class="line">                <span class="keyword">var</span> keywords = this.value.<span class="built_in">trim</span>().toLowerCase().<span class="built_in">split</span>(<span class="regexp">/[\s\-]+/</span>);</span><br><span class="line">                <span class="symbol">$resultCo</span>ntent.innerHTML = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (this.value.<span class="built_in">trim</span>().<span class="built_in">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// perform local searching</span></span><br><span class="line">                datas.forEach(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> isMatch = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">var</span> content_index = [];</span><br><span class="line">                    <span class="keyword">var</span> data_title = data.title.<span class="built_in">trim</span>().toLowerCase();</span><br><span class="line">                    <span class="keyword">var</span> data_content = data.content.<span class="built_in">trim</span>().<span class="built_in">replace</span>(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>, <span class="string">&quot;&quot;</span>).toLowerCase();</span><br><span class="line">                    <span class="keyword">var</span> data_url = data.url;</span><br><span class="line">                    <span class="keyword">var</span> index_title = <span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">var</span> index_content = <span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">var</span> first_occur = <span class="number">-1</span>;</span><br><span class="line">                    <span class="comment">// only match artiles with not empty titles and contents</span></span><br><span class="line">                    <span class="keyword">if</span> (data_title != <span class="string">&#x27;&#x27;</span> &amp;&amp; data_content != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                        keywords.forEach(<span class="keyword">function</span> (<span class="params">keyword, i</span>) &#123;</span><br><span class="line">                            index_title = data_title.<span class="built_in">indexOf</span>(keyword);</span><br><span class="line">                            index_content = data_content.<span class="built_in">indexOf</span>(keyword);</span><br><span class="line">                            <span class="keyword">if</span> (index_title &lt; <span class="number">0</span> &amp;&amp; index_content &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                                isMatch = <span class="literal">false</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (index_content &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                                    index_content = <span class="number">0</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                                    first_occur = index_content;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// show search results</span></span><br><span class="line">                    <span class="keyword">if</span> (isMatch) &#123;</span><br><span class="line">                        str += <span class="string">&quot;&lt;li&gt;&lt;a href=&#x27;&quot;</span> + data_url + <span class="string">&quot;&#x27; class=&#x27;search-result-title&#x27;&gt;&quot;</span> + data_title + <span class="string">&quot;&lt;/a&gt;&quot;</span>;</span><br><span class="line">                        <span class="keyword">var</span> content = data.content.<span class="built_in">trim</span>().<span class="built_in">replace</span>(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (first_occur &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// cut out 100 characters</span></span><br><span class="line">                            <span class="keyword">var</span> start = first_occur - <span class="number">20</span>;</span><br><span class="line">                            <span class="keyword">var</span> end = first_occur + <span class="number">80</span>;</span><br><span class="line">                            <span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                                start = <span class="number">0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (start == <span class="number">0</span>) &#123;</span><br><span class="line">                                end = <span class="number">100</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (end &gt; content.<span class="built_in">length</span>) &#123;</span><br><span class="line">                                end = content.<span class="built_in">length</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">var</span> match_content = content.substr(start, end);</span><br><span class="line">                            <span class="comment">// highlight all keywords</span></span><br><span class="line">                            keywords.forEach(<span class="keyword">function</span> (<span class="params">keyword</span>) &#123;</span><br><span class="line">                                <span class="keyword">var</span> regS = <span class="keyword">new</span> RegExp(keyword, <span class="string">&quot;gi&quot;</span>);</span><br><span class="line">                                match_content = match_content.<span class="built_in">replace</span>(regS, <span class="string">&quot;&lt;em class=\&quot;search-keyword\&quot;&gt;&quot;</span> + keyword + <span class="string">&quot;&lt;/em&gt;&quot;</span>);</span><br><span class="line">                            &#125;);</span><br><span class="line">                            str += <span class="string">&quot;&lt;p class=\&quot;search-result\&quot;&gt;&quot;</span> + match_content + <span class="string">&quot;...&lt;/p&gt;&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        str += <span class="string">&quot;&lt;/li&gt;&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                str += <span class="string">&quot;&lt;/ul&gt;&quot;</span>;</span><br><span class="line">                <span class="symbol">$resultCo</span>ntent.innerHTML = str;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="next主题更新"><a href="#next主题更新" class="headerlink" title="next主题更新"></a>next主题更新</h1><p>因为我当时创建博客时的一个疏忽，所以我不小心git clone了next主题的旧版本，为此，我又重新clone了一个新的，而且发现新的next主题集成了超多，超超超实用的功能，在这里列一下：</p>
<h2 id="夜晚模式"><a href="#夜晚模式" class="headerlink" title="夜晚模式"></a>夜晚模式</h2><p>夜晚模式！！它支持自动跟随系统，我们只需要在主题配置文件里边搜索<br><code>darkmode</code>然后改成true</p>
<h2 id="文章进度条"><a href="#文章进度条" class="headerlink" title="文章进度条"></a>文章进度条</h2><p>也是在主题配置文件里边，搜索，然后改成true</p>
]]></content>
      <tags>
        <tag>hexo博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>对于http一些浅薄的认识</title>
    <url>/%E5%AF%B9%E4%BA%8Ehttp%E4%B8%80%E4%BA%9B%E6%B5%85%E8%96%84%E7%9A%84%E8%AE%A4%E8%AF%86.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前刚刚看了一本书，看完之后对于一些以前一知半解的事都了解了一些<br>我们都知道，一般的浏览器里网页前面都会有把小锁，这个小锁是什么玩意？</p>
<span id="more"></span>
<p>这就要扯到<code>http与https</code>了，这是什么？好像挺迷惑的，我开始也这么觉得<br>通过查阅资料可以知道<code>http</code>全称是<code>超文本传输协议</code><br>这……这……更深奥了啊？？！<br>没关系，我们来捋一捋，我们把超文本传输协议里面深奥的名词都给他扒出来，把他分成<code>超文本</code>，<code>传输</code>，<code>协议</code>。我们先来看所谓的<code>超文本</code>。<br>文本我们都知道，但是超文本是什么呢？<code>超文本</code>其实包括了图像，视频以及一大堆乱七八糟的东西。换句话说，超文本就是你在网站上看到的所有东西。<br>对于一个服务器来说，无论是文本，还是图像，还是视频，服务器都能用一串文本来解释，我个人对它的理解就是，一张图像，服务器可以用xxx.jpg来解释，最终发给你的浏览器，然后把图像渲染在你的电脑上。<br>OK，接下来就是<code>传输</code>，这里的传输应该很好理解，就比如说a同学给b同学传纸条，这就是一种传输，信息的传递。当然，在http中，传输是允许有人接力的。就比如说a同学给b同学传纸条，结果他们中间隔着x同学和y同学，于是<code>a-&gt;x-&gt;y-&gt;b</code>其中的<code>-&gt;</code>就是传送的意思。http就规定了计算机与服务器之间的信息传输。<br>最后是<code>协议</code>，我们还是拿a同学传纸条的例子，假设他们为了防止老师抓住他们传纸条，约定了一些协议，比如传纸条要偷偷的等等，这就是一种协议。当然，如果他们找x同学和y同学进行中转，x同学和y同学也要遵从这种协议。<strong>在http中，中转者也需要遵从http协议。</strong></p>
]]></content>
      <tags>
        <tag>http/https</tag>
      </tags>
  </entry>
  <entry>
    <title>对于next主题归档错误的解决</title>
    <url>/%E5%AF%B9%E4%BA%8Enext%E4%B8%BB%E9%A2%98%E5%BD%92%E6%A1%A3%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们都知道next主题有个东西叫做categories，就是主页上显示的那个「分类」<br>但是在当前版本的next（也许最新的没有），有一个致命的bug，会导致他显示错误<br><strong>同时，这个bug也适用于除了<code>home主页</code>的其他所有在侧边栏显示的页面</strong></p>
<span id="more"></span>
<p>首先，当我们的博客还没有categories页面的时候，我们会使用这个命令来创建一个categories页面<br><code>hexo new page &quot;categories&quot;</code><br>接下来，在你的博客的根目录&#x2F;source 下会出现一个文件夹categories，里面会有一个index.md文件，但是做完了这些还不够，你还需要去主题配置文件<code>你的博客根目录/theme/next/_config.yml</code>里找到一个menu配置，内容如下</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  #about: <span class="regexp">/about/</span> || user</span><br><span class="line">  #tags: <span class="regexp">/tags/</span> || tags</span><br><span class="line">  #categories: <span class="regexp">/categories/</span> || th</span><br><span class="line">  archives: <span class="regexp">/archives/</span> || archive</span><br><span class="line">  #schedule: <span class="regexp">/schedule/</span> || calendar </span><br></pre></td></tr></table></figure>
<p>我们要使一个页面在侧边栏生效，就需要取消掉一个选项前面的<code>#</code>号。<br>比如说我们要改categories项，让他显示在侧边栏，就把它改成这样：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /|| home</span><br><span class="line">  #about: <span class="regexp">/about/</span>|| user</span><br><span class="line">  #tags: <span class="regexp">/tags/</span>|| tags</span><br><span class="line">  categories: <span class="regexp">/categories/</span>|| th</span><br><span class="line">  archives: <span class="regexp">/archives/</span>|| archive</span><br><span class="line">  #schedule: <span class="regexp">/schedule/</span> || calendar</span><br></pre></td></tr></table></figure>
<p>以此类推<br>但问题就出在这里，我们把其中的一个选项放大来看<br><code>categories: /categories/ || th</code><br>我们可以发现在&#x2F;和||中间还隔着一个空格<br>还记得我们<a href="https://hehysh.github.io/2022/04/05/%E6%B5%8B%E8%AF%95/#more">上次说的</a>吗？<br>在hexo中：冒号后面要加空格，在这里也出现了同样的问题<br>在老版本中，&#x2F;和||中间隔着一个空格是完全没关系的，但到了新版本，他就会像冒号后面不加空格一样显示错误，虽然规则改了，但文件还没改，这就导致出现了致命的bug<br>具体错误会像这样，当你点击侧边栏界面是，页面会显示<br><code>Cannot GET /%20</code><br>其中%20是空格的意思，这就让我们确认了是空格导致的问题<br>我们把错误的内容改成这样⬇️</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> /||home</span><br><span class="line"><span class="symbol">  about:</span> <span class="keyword">/about/</span>||user</span><br><span class="line"><span class="symbol">  tags:</span> <span class="keyword">/tags/</span>||tags</span><br><span class="line"><span class="symbol">  categories:</span> <span class="keyword">/categories/</span>||th</span><br><span class="line"><span class="symbol">  archives:</span> <span class="keyword">/archives/</span>||archive</span><br><span class="line">  <span class="meta">#schedule: /schedule/||calendar</span></span><br></pre></td></tr></table></figure>
<p>然后保存，再重新部署<br>over！搞定辣！</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>对博客密码的测试</title>
    <url>/%E5%AF%B9%E5%8D%9A%E5%AE%A2%E5%AF%86%E7%A0%81%E7%9A%84%E6%B5%8B%E8%AF%95.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>如果你能读到这句话，我就测试成功辣</p>
]]></content>
      <tags>
        <tag>hexo博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>更改博客字体</title>
    <url>/%E6%9B%B4%E6%94%B9%E5%8D%9A%E5%AE%A2%E5%AD%97%E4%BD%93.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><br>也许有细心的朋友会发现，我的博客原本是微软雅黑的字体<br><br>但是现在已经变成了思源宋体辣！<br><br>其实改字体的过程有些<strong>一波三折</strong></p>
<span id="more"></span>
<p><br>我的过程主要是按照这位大大的过程来的<br><br><a href="http://www.chenlianhan.com/2020/03/20/HEXO-NEXT%E7%95%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/#more">贴链接</a><br><br>但是在按照他的教程进行改字体操作时，发现了一个奇怪的地方<br><br>按照他的办法，要先改站点yml，再改主题yml，然后贴思源宋体的link在一个自建文件里，以达到引用的效果。<br><br>但是我自己试的时候，发现谷歌字体镜像站已经挂了，link也没了。我挂了梯子去<a href="font.google.com">谷歌字体站</a>，但是加载出来一瞬间就跳到了404界面，也许是我的梯子有问题，但是我的目标是得到思源宋体的link链接<br><br>找了很多镜像站，全部都挂了，无奈，换教程，看看有没有绕过link链接的办法。<br><br>就在这时，我找到了一个新教程，这个教程和前面那位大大的基本一样，但是不用贴link链接，也就是说，他的教程只有两步：改站点yml，改主题yml，然后就完事了，根本就没link链接什么事。<br><br>于是，我不管link链接，将信将疑的hexo s -d测试了一下，没想到，字体真的显示出来了，这波我热泪盈眶（划掉）<br><br>就这样，我hexo g -d把博客正式部署上了github，过了两三分钟，我去康了康博客，结果他还是微软雅黑。<br><br>嗯？？！！！<br><br>我看了看localhostt:4000，嗯？！localhost的预览仍然是思源宋体，但是部署到了github上却变成了微软雅黑。<br><br>为了确认是github没更新还是代码出了问题，我微调了网站的一个部分，重新部署，结果，过了几分钟，那个微调生效了，字体却没有生效。<br><br>奇了怪了？？<br><br>我上网查了查，其他人却没有这种问题。<br><br>再来一次！我又重新部署了一遍，然后等了半个小时，再打开网站<br><br>over!成功辣！</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>对于hexo博客的空格之重要性</title>
    <url>/%E6%B5%8B%E8%AF%95.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><br>耗时一天，我十贰终于搭建出了基于hexo的博客<br><br>哈哈哈哈实在是太开心辣哈哈哈哈<br><br>但是部署第一篇正经的文章却出现了一些问题</p>
<span id="more"></span>
<p><br>我们都知道在用hexo new生成文章的时候，会生成一个.md文件，里面有以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">???</span></span><br><span class="line"><span class="attr">tag:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p><br>其中date是自动生成的，是你创建文章的时间，而tag是空着的，于是，我就改了一下tag，把他改成了这样子：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">???</span></span><br><span class="line"><span class="string">tag:hexo</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p><br>注意这里的：冒号后面没有空格，直接就跟上了hexo，不谙世事的我就这么hexo g -d把博客部署到了github上<br><br>没想到部署到github时就开始一直报错，一看错误类型：<br><code>err： yamlexception</code><br><br>我也不知道咋回事，上网一搜。原来，在hexo的代码中，冒号后面一定加空格，不然表示不出来<br><br>正确的表述应该是这样：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">???</span></span><br><span class="line"><span class="attr">tag:</span> <span class="string">hexo</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p><br>通过这个事例，我们可以知道在hexo中冒号后面加空格的必要性<br><br>兄弟们，你门学会了嘛？🤣</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>给博客添加动态背景</title>
    <url>/%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><br>也许next主题的背景是白色的，有点单调<br><br>但next主题也是自带动态背景的<br><br>给博客一加，逼格顿时就<strong>高了许多</strong></p>
<span id="more"></span>
<p><br>我们先到theme文件夹，找到next主题，再找到_comfig.yml<br><br>然后我们更改一行canvas_nest，他的值默认为false，但是我们给他改成true<br><br>与此同时，你会发现还有其他的三个为false的选项，他们也是动态背景<br><br>但是我试了一下，另外三个太杂乱，所以我还是选了canvas_nest的动态背景<br><br>但是经过我的多次测试，我发现后方的线条会给一些配置稍弱的设备带来卡顿，我现在正在想办法减少线条</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo博客搭建</tag>
      </tags>
  </entry>
</search>
